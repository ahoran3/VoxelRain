Jonathan Cools-Lartigue, Brandon Forster
Matt Hansen, Alex Horan
CAP 4720- Project 1
24 September 2013
Implementation Plan
The project is divided up into 7 main components. These are the standard library, the provided models, the HTML document that launches the Javascript code, the main VoxelRain program, and helper programs for the camera, renderable objects, and the scene. 

We will not be discussing the standard library, provided models, or camera or Renderable since there's nothing implemented there specific to this project. The HTML document will likewise not be discussed since its implementation is trivial and pretty boring.

The meat and potatoes of the project is in the VoxelRain.js file; this is where most of the processing happens. In broad terms of execution, the program will initialize all of the fancy menu and message areas and canvas. From there, we build a new 3D array to store the offset from the start position to its final position of objects stacked up at arbitrary points in the area that objects can occupy. We begin drawing. 

Set the components of the model matrices of the objects at randomized points so they spawn all over the place. Make them fall by reducing the value of the height value in the 3x3 matrix we set up to handle objects. Keep doing this for every frame, and on every 10th frame draw a new object. Objects with a height of zero have their fall value set to zero, so when the model matrix translation loop gets to them, do nothing.

We are creating a file called scene.js to abstract out the rendering. This file will determine the "delta," the value that determines the spacing between objects by looking at the minimum and maximum edge locations of arbitrary objects. It also determines the minimum and maximal edge locations of the entire scene, by looking at the objects drawn on the extremities of the grid. From there, it makes an arbitrary Camera and projection matrix. This file is discrete from VoxelRain so that the one call in VoxelRain can be used for a cube, teapot or skull.


Jonathan Cools-Lartigue:
- Fixed spacing bugs between cube layers
- implemented model switching
- model generation and falling
- Created scene file
- Implemented code allowing multiple objects to fall simultaneously
- Cleaned up .js code and created additional files for improved readability
- Layout transformations

Brandon Forster:
- Multiple static object creation
- Objects align to grid
- Object stacking and collision
- Implementation plan rough draft

Matt Hansen:
- Camera rotation
- Y-axis Translations
- Positioning of objects in grid

Alex Horan:
- Initial project setup
- Multiple formatting changes to the Proj1.html file. 
- Created random number function to be used in each objects random position
- Created seperate array objects to keep track of the staticObjects and fallingObjects
- Set up seperate translation matricies for fallingObject and staticObjects
- Created second message field and implemented the HeightMap feature
- Edited camera settings to prevent objects from rotating out of scene 





